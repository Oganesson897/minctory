import org.jetbrains.gradle.ext.Gradle

plugins {
    id 'java'
    id 'java-library'
    id 'com.diffplug.spotless' version '7.0.2'
    id 'org.jetbrains.gradle.plugin.idea-ext' version '1.1.8'
    id 'com.github.johnrengelman.shadow' version '8.1.1' apply false
    id 'edu.sc.seis.launch4j' version '3.0.6'
}

group = 'org.minctory'
version = '0.0.1-alpha'

repositories {
    mavenCentral()
}

java {
    withSourcesJar()
}

launch4j {
    mainClassName = 'org.minctory.Main'
    jvmOptions = [
            '-Dfile.encoding=UTF-8',
            '--add-opens',
            'java.base/java.net=ALL-UNNAMED'
    ]
    //icon = "${projectDir}/icon.ico" // Not available in now
}

configurations {
    compileOnly.extendsFrom(annotationProcessor)
}

spotless {
    format 'misc', {
        // define the files to apply `misc` to
        target '*.gradle', '.gitattributes', '.gitignore'

        // define the steps to apply to those files
        trimTrailingWhitespace()
        leadingSpacesToTabs() // or leadingTabsToSpaces. Takes an integer argument if you don't like 4
        endWithNewline()
    }
    java {
        target 'src/main/java/**/*.java', 'src/test/java/**/*.java'

        toggleOffOn()
        removeUnusedImports()
        endWithNewline()
        formatAnnotations()
        googleJavaFormat('1.8').aosp().reflowLongStrings().skipJavadocFormatting()
    }
}

repositories {
    maven {
        url 'http://maven.snowlyicewolf.club/'
        allowInsecureProtocol = true
    }
}

dependencies {
    // Annotation
    implementation 'org.jetbrains:annotations:24.0.0'

    // Parser
    implementation 'io.hotmoka:toml4j:0.7.3' // TOML
    implementation 'com.google.code.gson:gson:2.11.0' // JSON
    implementation "club.someoneice.json:amarok-json-for-java:1.7.3" // JSON

    // Logger
    implementation 'org.apache.logging.log4j:log4j-api:2.24.3'

    // Utils
    implementation 'it.unimi.dsi:fastutil:8.5.15'

    // Networking
    implementation 'org.apache.httpcomponents.client5:httpclient5:5.4.1'
}

idea {
    module {
        inheritOutputDirs = true
    }
    project {
        settings {
            runConfigurations {
                "Generate Dependencies File"(Gradle) {
                    taskNames = ["genDependFile"]
                }
                "Export Executable File"(Gradle) {
                    taskNames = ["createExe"]
                }
            }
            compiler.javac {
                afterEvaluate {
                    javacAdditionalOptions = "-encoding utf8"
                    moduleJavacAdditionalOptions = [
                            (project.name + ".main"): tasks.compileJava.options.compilerArgs.collect { '"' + it + '"' }.join(' ')
                    ]
                }
            }
        }
    }
}

tasks.register("genDependFile") {
    group = "minctory helper"
    def dep = file("src/main/resources/dependencies.txt")
    doFirst {
        print("Generating dependencies.txt...")
        dep.write("")
    }
    doLast {
        def names = configurations.implementation.dependencies.name
        def groups = configurations.implementation.dependencies.group
        def versions = configurations.implementation.dependencies.version

        [names, groups, versions].transpose().each {
            def (name, group, version) = it
            dep << "${group}:${name}:${version}\n"
        }
    }
}

idea.project.settings {
    taskTriggers {
        afterSync 'genDependFile'
    }
}